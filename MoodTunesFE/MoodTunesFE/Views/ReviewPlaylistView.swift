//
//  ReviewPlaylistView.swift
//  MoodTunesFE
//
//  Created by Abhishek Ambastha on 10/5/24.
//

import SwiftUI

struct ReviewPlaylistView: View {
    let playlist: [Track]
    let accessToken: String
    
    @State private var playlistName: String = ""  // To store the playlist name
    @State private var isCreatingPlaylist: Bool = false // To track the button state
    @State private var isAdded: Bool = false
    
    var body: some View {
        VStack {
            Text("Your Playlist")
                .font(.largeTitle)
                .fontWeight(.bold)
                .padding()
            
            List {
                ForEach(Array(playlist.enumerated()), id: \.element.id) { index, track in
                    HStack {
                        Text("\(index + 1)")
                            .foregroundColor(.white)
                            .frame(width: 30)
                        VStack(alignment: .leading) {
                            Text(track.name)
                                .font(.headline)
                            Text(track.artist)
                                .font(.subheadline)
                                .foregroundColor(.secondary)
                        }
                    }
                    .listRowBackground(index % 2 == 0 ? Color.green.opacity(0.7) : Color.green.opacity(0.3))
                }
            }
            .listStyle(PlainListStyle())
            
            TextField("Enter Playlist Name", text: $playlistName)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding()

            // Button to add playlist to Spotify
            if isAdded == false {
                Button(action: {
                    if !playlistName.isEmpty {
                        isCreatingPlaylist = true
                        createSpotifyPlaylist(playlistName: playlistName)
                    }
                }) {
                    Text(isCreatingPlaylist ? "Adding Playlist..." : "Add Playlist to Your Spotify Account")
                        .foregroundColor(.white)
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(isCreatingPlaylist ? Color.gray : Color.blue)
                        .cornerRadius(10)
                }
                .padding()
                .disabled(isCreatingPlaylist)
            }
            else {
                Text("Successfully Added to Your Spotify")
                   .font(.headline)
                   .foregroundColor(.green)
                   .padding()
            }
        }
        .padding()
    }

    func createSpotifyPlaylist(playlistName: String) {
        let createPlaylistURL = "https://api.spotify.com/v1/me/playlists"
        let headers = [
            "Authorization": "Bearer \(accessToken)", // Using access token here
            "Content-Type": "application/json"
        ]
        
        let body: [String: Any] = [
            "name": playlistName,
            "description": "Generated by MoodTunes",
            "public": true
        ]
        
        guard let url = URL(string: createPlaylistURL),
              let bodyData = try? JSONSerialization.data(withJSONObject: body) else {
            print("Invalid URL or body data for creating playlist")
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.allHTTPHeaderFields = headers
        request.httpBody = bodyData
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Error creating playlist: \(error.localizedDescription)")
                return
            }
            if let httpResponse = response as? HTTPURLResponse {
                print("HTTP Status Code: \(httpResponse.statusCode)")
            }
            if let data = data {
                print("Raw Response Data: \(String(data: data, encoding: .utf8) ?? "No response data")")
            }
            guard let data = data,
                  let json = try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any],
                  let playlistID = json["id"] as? String else {
                print("Failed to create playlist or parse response")
                return
            }
            print("Created playlist with ID: \(playlistID)")
            addTracksToSpotifyPlaylist(playlistID: playlistID) // Call to add tracks after creation
        }.resume()
    }
    
    // Function to add tracks to the created playlist
    func addTracksToSpotifyPlaylist(playlistID: String) {
        let addTracksURL = "https://api.spotify.com/v1/playlists/\(playlistID)/tracks"
        let headers = [
            "Authorization": "Bearer \(accessToken)",
            "Content-Type": "application/json"
        ]
        
        let trackURIs = playlist.map { "spotify:track:\($0.id)" }
        let body: [String: Any] = [
            "uris": trackURIs
        ]
        
        guard let url = URL(string: addTracksURL),
              let bodyData = try? JSONSerialization.data(withJSONObject: body) else {
            print("Invalid URL or body data for adding tracks")
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.allHTTPHeaderFields = headers
        request.httpBody = bodyData
        
        // Perform the request to add tracks to the playlist
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Error adding tracks: \(error.localizedDescription)")
                return
            }
            print("Successfully added tracks to playlist.")
            DispatchQueue.main.async {
                isCreatingPlaylist = false // Reset the button state
                isAdded = true
            }
        }.resume()
    }
}
